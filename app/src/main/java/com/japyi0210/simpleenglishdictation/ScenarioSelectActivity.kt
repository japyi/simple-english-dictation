package com.japyi0210.simpleenglishdictation

import android.app.AlertDialog
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import com.google.android.gms.ads.*
import com.google.android.gms.ads.interstitial.InterstitialAd
import com.google.android.gms.ads.interstitial.InterstitialAdLoadCallback
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import java.util.Calendar

class ScenarioSelectActivity : AppCompatActivity() {

    data class Scenario(val name: String, val fileKey: String, val category: String, val imageFileName: String)

    private var mInterstitialAd: InterstitialAd? = null

    private lateinit var categorySpinner: Spinner
    private lateinit var orderSpinner: Spinner
    private lateinit var listView: ListView

    private val orderOptions = listOf("ÏàúÏÑúÎåÄÎ°ú Î¨∏Ïû• Îì£Í∏∞", "Î¨¥ÏûëÏúÑÎ°ú Î¨∏Ïû• Îì£Í∏∞")

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scenario_select)

        showWeeklyRankingDialog()

        MobileAds.initialize(this) {}
        loadInterstitialAd()

        listView = findViewById(R.id.listViewScenarios)
        categorySpinner = findViewById(R.id.categorySpinner)
        orderSpinner = findViewById(R.id.orderSpinner)

        val allScenarios = mutableListOf(
            Scenario("Î¨¥ÏûëÏúÑ Î¨∏Ïû• Îì£Í∏∞", "all", "Ï†ÑÏ≤¥", "all.webp")
        ) + loadScenarios()

        val categories = allScenarios.map { it.category }.distinct().sorted()
        val categoryOptions = listOf("Ï†ÑÏ≤¥") + categories.filter { it != "Ï†ÑÏ≤¥" }

        val categoryAdapter = ArrayAdapter(this, R.layout.font_list_item, categoryOptions)
        categoryAdapter.setDropDownViewResource(R.layout.font_list_item)
        categorySpinner.adapter = categoryAdapter

        val orderAdapter = ArrayAdapter(this, R.layout.font_list_item, orderOptions)
        orderAdapter.setDropDownViewResource(R.layout.font_list_item)
        orderSpinner.adapter = orderAdapter

        updateList(allScenarios)

        categorySpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>, view: android.view.View, position: Int, id: Long) {
                val selectedCategory = categoryOptions[position]
                val filtered = if (selectedCategory == "Ï†ÑÏ≤¥") {
                    allScenarios
                } else {
                    allScenarios.filter { it.category == selectedCategory }
                }
                updateList(filtered)
            }

            override fun onNothingSelected(parent: AdapterView<*>) {}
        }

        val bottomNavigation = findViewById<BottomNavigationView>(R.id.bottom_navigation)
        bottomNavigation.selectedItemId = R.id.nav_menu

        bottomNavigation.setOnItemSelectedListener { item ->
            when (item.itemId) {
                R.id.nav_menu -> true
                R.id.nav_dictation -> {
                    Toast.makeText(this, "ÏãúÎÇòÎ¶¨Ïò§Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.", Toast.LENGTH_SHORT).show()
                    false
                }
                R.id.ai_review -> {
                    val user = FirebaseAuth.getInstance().currentUser
                    if (user == null) startActivity(Intent(this, StartActivity::class.java))
                    else startActivity(Intent(this, AiReviewActivity::class.java))
                    true
                }
                R.id.nav_account -> {
                    val user = FirebaseAuth.getInstance().currentUser
                    if (user == null) {
                        val intent = Intent(this, StartActivity::class.java)
                        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
                        startActivity(intent)
                    } else {
                        startActivity(Intent(this, StatisticsChartActivity::class.java))
                    }
                    true
                }
                R.id.nav_exit -> {
                    val versionName = try {
                        packageManager.getPackageInfo(packageName, 0).versionName
                    } catch (e: Exception) {
                        "Ïïå Ïàò ÏóÜÏùå"
                    }

                    AlertDialog.Builder(this)
                        .setTitle("Ï†ÄÏû• Î∞è Ï¢ÖÎ£å")
                        .setMessage(
                            """
                            ÌïôÏäµÍ∏∞Î°ùÏùÑ Ï†ÄÏû•ÌïòÍ≥† Ï¢ÖÎ£åÌïòÏãúÍ≤†ÏäµÎãàÍπå?

                            üì¶ Î≤ÑÏ†Ñ: $versionName
                            üìß Î¨∏Ïùò: CREN-J (japyi0210@gmail.com)
                            """.trimIndent()
                        )
                        .setPositiveButton("Ïòà") { _, _ -> showAdOrExit() }
                        .setNegativeButton("ÏïÑÎãàÏò§", null)
                        .show()
                    true
                }
                else -> false
            }
        }
    }

    private fun updateList(filteredScenarios: List<Scenario>) {
        val prefs = getSharedPreferences("UsedSentences", Context.MODE_PRIVATE)
        val allScenarioKeys = loadScenarios().map { it.fileKey }

        val itemsWithProgress = filteredScenarios.map { scenario ->
            val totalCount = getTotalSentenceCount(scenario.fileKey)

            val usedCount = if (scenario.fileKey == "all") {
                allScenarioKeys.sumOf { key ->
                    prefs.getStringSet("used_$key", emptySet())?.size ?: 0
                }
            } else {
                prefs.getStringSet("used_${scenario.fileKey}", emptySet())?.size ?: 0
            }

            val progressText = " ($usedCount / $totalCount)"
            Scenario(
                name = scenario.name + progressText,
                fileKey = scenario.fileKey,
                category = scenario.category,
                imageFileName = scenario.imageFileName
            )
        }

        val adapter = ScenarioAdapter(this, itemsWithProgress)
        listView.adapter = adapter

        listView.setOnItemClickListener { _, _, position, _ ->
            val selected = filteredScenarios[position]
            val userOrderSelection = orderOptions[orderSpinner.selectedItemPosition]
            val internalOrderMode = if (userOrderSelection.contains("ÏàúÏÑú")) "ÏàúÏÑú" else "ÎûúÎç§"

            val intent = Intent(this, MainActivity::class.java)
            intent.putExtra("scenario_key", selected.fileKey)
            intent.putExtra("order_mode", internalOrderMode)
            intent.putExtra("image_file_name", selected.imageFileName)
            startActivity(intent)
        }
    }

    private fun loadScenarios(): List<Scenario> {
        return try {
            val inputStream = assets.open("scenarios.txt")
            inputStream.bufferedReader().readLines().mapNotNull {
                val parts = it.split("\t")
                if (parts.size >= 4) {
                    Scenario(
                        name = parts[0].trim(),
                        fileKey = parts[1].trim(),
                        category = parts[2].trim(),
                        imageFileName = parts[3].trim()
                    )
                } else null
            }
        } catch (e: Exception) {
            Toast.makeText(this, "ÏãúÎÇòÎ¶¨Ïò§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
            emptyList()
        }
    }

    private fun getTotalSentenceCount(fileKey: String): Int {
        return try {
            val assetManager = assets
            val lines = if (fileKey == "all") {
                val files = assetManager.list("")?.filter {
                    it.startsWith("scenario_") && it.endsWith(".txt")
                } ?: emptyList()
                files.flatMap { file ->
                    try {
                        assetManager.open(file).bufferedReader().readLines()
                    } catch (e: Exception) {
                        emptyList()
                    }
                }
            } else {
                val fileName = "scenario_${fileKey}.txt"
                assetManager.open(fileName).bufferedReader().readLines()
            }

            lines.count { it.contains("\t") }
        } catch (e: Exception) {
            0
        }
    }

    private fun loadInterstitialAd() {
        val adRequest = AdRequest.Builder().build()
        InterstitialAd.load(this, "ca-app-pub-1872760638277957/9712274803", adRequest,
            object : InterstitialAdLoadCallback() {
                override fun onAdLoaded(ad: InterstitialAd) {
                    mInterstitialAd = ad
                }

                override fun onAdFailedToLoad(adError: LoadAdError) {
                    mInterstitialAd = null
                }
            })
    }

    private fun showAdOrExit() {
        if (mInterstitialAd != null) {
            mInterstitialAd?.fullScreenContentCallback = object : FullScreenContentCallback() {
                override fun onAdDismissedFullScreenContent() {
                    FirebaseAuth.getInstance().signOut()
                    finishAffinity()
                }

                override fun onAdFailedToShowFullScreenContent(adError: AdError) {
                    FirebaseAuth.getInstance().signOut()
                    finishAffinity()
                }
            }
            mInterstitialAd?.show(this)
        } else {
            FirebaseAuth.getInstance().signOut()
            finishAffinity()
        }
    }

    private fun showWeeklyRankingDialog() {
        val db = FirebaseFirestore.getInstance()
        val currentUser = FirebaseAuth.getInstance().currentUser
        val weekId = getCurrentWeekId()

        val messageView = TextView(this).apply {
            text = "Î∂àÎü¨Ïò§Îäî Ï§ë..."
            setPadding(50, 40, 50, 20)
            textSize = 15f
            setLineSpacing(0f, 1.3f)
        }

        val noticeTextView = TextView(this).apply {
            text = ""
            setPadding(50, 20, 50, 40)
            textSize = 15f
            setLineSpacing(0f, 1.2f)
        }

        val scrollView = ScrollView(this).apply {
            val layout = LinearLayout(this@ScenarioSelectActivity).apply {
                orientation = LinearLayout.VERTICAL
                addView(messageView)
                addView(noticeTextView)
            }
            addView(layout)
        }

        // ‚¨áÔ∏è ÌÉÄÏù¥ÌãÄÏùÑ Ïª§Ïä§ÌÖÄ ViewÎ°ú ÎåÄÏ≤¥
        val titleView = TextView(this).apply {
            text = "üèÜ Ïã§ÏãúÍ∞Ñ Îû≠ÌÇπ TOP 5"
            setPadding(50, 50, 50, 30)
            textSize = 18f
            setTypeface(null, android.graphics.Typeface.BOLD)
        }

        val dialog = AlertDialog.Builder(this)
            .setCustomTitle(titleView)
            .setView(scrollView)
            .setPositiveButton("ÌôïÏù∏", null)
            .create()

        dialog.setCanceledOnTouchOutside(false)
        dialog.setCancelable(false)
        dialog.show()

        // üîπ Í≥µÏßÄÏÇ¨Ìï≠
        db.collection("notices").document("weekly_notice").get()
            .addOnSuccessListener { doc ->
                val msg = doc.getString("message") ?: ""
                if (msg.isNotBlank()) {
                    val noticeText = "\n\n$msg"
                    val spannable = android.text.SpannableString(noticeText).apply {
                        setSpan(android.text.style.RelativeSizeSpan(0.85f), 0, length, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
                        setSpan(android.text.style.ForegroundColorSpan(0xFF888888.toInt()), 0, length, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
                    }
                    noticeTextView.text = spannable
                }
            }
            .addOnFailureListener {
                noticeTextView.text = ""
            }

        // üîπ Ï£ºÍ∞Ñ Îû≠ÌÇπ
        db.collection("weekly_rankings")
            .document(weekId)
            .collection("users")
            .orderBy("score", com.google.firebase.firestore.Query.Direction.DESCENDING)
            .limit(5)
            .get()
            .addOnSuccessListener { result ->
                val rankListBuilder = StringBuilder()
                var previousScore: Long? = null
                var currentRank = 0
                var actualIndex = 0

                for (doc in result) {
                    actualIndex++
                    val score = doc.getLong("score") ?: 0
                    if (score != previousScore) {
                        currentRank = actualIndex
                        previousScore = score
                    }
                    val name = maskEmail(doc.getString("name") ?: "ÏùµÎ™Ö")
                    rankListBuilder.append("${currentRank}ÏúÑ: $name (${score}Î¨∏Ïû•)\n")
                }

                val rankList = rankListBuilder.toString().ifEmpty { "ÏïÑÏßÅ Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§." }

                val afterTextLoad: (String) -> Unit = { footnote ->
                    val fullText = "$rankList\n$footnote"
                    val spannable = android.text.SpannableString(fullText).apply {
                        setSpan(android.text.style.RelativeSizeSpan(0.85f), rankList.length, fullText.length, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
                        setSpan(android.text.style.StyleSpan(android.graphics.Typeface.ITALIC), rankList.length, fullText.length, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
                        setSpan(android.text.style.ForegroundColorSpan(0xFF888888.toInt()), rankList.length, fullText.length, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
                        setSpan(android.text.style.StyleSpan(android.graphics.Typeface.BOLD), 0, rankList.length, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)
                    }
                    messageView.text = spannable
                }

                if (currentUser != null) {
                    db.collection("weekly_rankings")
                        .document(weekId)
                        .collection("users")
                        .document(currentUser.uid)
                        .get()
                        .addOnSuccessListener { userDoc ->
                            val myScore = userDoc.getLong("score") ?: 0
                            val footnote = listOf(
                                "‚Äª 50% Ïù¥ÏÉÅ ÏùºÏπòÌïú ÎãµÎ≥ÄÎßå ÏàúÏúÑÏóê Î∞òÏòÅÎê©ÎãàÎã§.",
                                "‚Äª ÏàúÏúÑÎäî Îß§Ï£º ÏõîÏöîÏùº ÏûêÏ†ïÏóê Ï¥àÍ∏∞ÌôîÎê©ÎãàÎã§.",
                                "‚Äª Ïù¥Î≤à Ï£ºÏóê Ï¥ù ${myScore}Î¨∏Ïû•ÏùÑ Ìë∏ÏÖ®ÏäµÎãàÎã§!"
                            ).joinToString("\n")
                            afterTextLoad(footnote)
                        }
                } else {
                    val footnote = listOf(
                        "‚Äª 50% Ïù¥ÏÉÅ ÏùºÏπòÌïú ÎãµÎ≥ÄÎßå ÏàúÏúÑÏóê Î∞òÏòÅÎê©ÎãàÎã§.",
                        "‚Äª ÏàúÏúÑÎäî Îß§Ï£º ÏõîÏöîÏùº ÏûêÏ†ïÏóê Ï¥àÍ∏∞ÌôîÎê©ÎãàÎã§.",
                        "‚Äª Î°úÍ∑∏Ïù∏ÌïòÎ©¥ Ïù¥Î≤à Ï£º Í∏∞Î°ùÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§."
                    ).joinToString("\n")
                    afterTextLoad(footnote)
                }
            }
            .addOnFailureListener {
                messageView.text = "Îû≠ÌÇπ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§."
            }
    }

    private fun getCurrentWeekId(): String {
        val cal = Calendar.getInstance()
        val week = cal.get(Calendar.WEEK_OF_YEAR)
        val year = cal.get(Calendar.YEAR)
        return String.format("%04d-W%02d", year, week)
    }

    private fun maskEmail(email: String): String {
        val parts = email.split("@")
        if (parts.size != 2) return email
        val id = parts[0]
        val domain = parts[1]
        val prefix = if (id.length <= 3) id else id.substring(0, 3)
        return "$prefix*****@$domain"
    }
}
